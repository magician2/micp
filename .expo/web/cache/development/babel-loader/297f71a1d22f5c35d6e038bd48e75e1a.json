{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useWorker } from '@koale/useworker';\nimport * as React from 'react';\nimport { captureImageData } from \"./WebCameraUtils\";\n\nvar qrWorkerMethod = function qrWorkerMethod(_ref) {\n  var _parsed;\n\n  var data = _ref.data,\n      width = _ref.width,\n      height = _ref.height;\n  var decoded = self.jsQR(data, width, height, {\n    inversionAttempts: 'dontInvert'\n  });\n  var parsed;\n\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (err) {\n    parsed = decoded;\n  }\n\n  if ((_parsed = parsed) != null && _parsed.data) {\n    var nativeEvent = {\n      type: 'qr',\n      data: parsed.data\n    };\n\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [parsed.location.topLeftCorner, parsed.location.bottomLeftCorner, parsed.location.topRightCorner, parsed.location.bottomRightCorner];\n    }\n\n    return nativeEvent;\n  }\n\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    timeout: 5000\n  });\n}\n\nexport function useWebQRScanner(video, _ref2) {\n  var isEnabled = _ref2.isEnabled,\n      captureOptions = _ref2.captureOptions,\n      interval = _ref2.interval,\n      onScanned = _ref2.onScanned,\n      onError = _ref2.onError;\n  var isRunning = React.useRef(false);\n  var timeout = React.useRef(undefined);\n\n  var _useRemoteJsQR = useRemoteJsQR(),\n      _useRemoteJsQR2 = _slicedToArray(_useRemoteJsQR, 2),\n      decode = _useRemoteJsQR2[0],\n      clearWorker = _useRemoteJsQR2[1];\n\n  function scanAsync() {\n    var data, nativeEvent, intervalToUse;\n    return _regeneratorRuntime.async(function scanAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!isRunning.current || !onScanned)) {\n              _context.next = 3;\n              break;\n            }\n\n            stop();\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.prev = 3;\n            data = captureImageData(video.current, captureOptions);\n\n            if (!data) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(decode(data));\n\n          case 8:\n            nativeEvent = _context.sent;\n\n            if (nativeEvent != null && nativeEvent.data) {\n              onScanned({\n                nativeEvent: nativeEvent\n              });\n            }\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n\n            if (onError) {\n              onError({\n                nativeEvent: _context.t0\n              });\n            }\n\n          case 15:\n            _context.prev = 15;\n\n            if (!(interval === 0)) {\n              _context.next = 19;\n              break;\n            }\n\n            stop();\n            return _context.abrupt(\"return\");\n\n          case 19:\n            intervalToUse = !interval || interval < 0 ? 16 : interval;\n            timeout.current = setTimeout(function () {\n              scanAsync();\n            }, intervalToUse);\n            return _context.finish(15);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 12, 15, 22]], Promise);\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(function () {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}","map":{"version":3,"mappings":"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","names":["useWorker","React","captureImageData","qrWorkerMethod","data","width","height","decoded","self","jsQR","inversionAttempts","parsed","JSON","parse","err","nativeEvent","type","location","cornerPoints","topLeftCorner","bottomLeftCorner","topRightCorner","bottomRightCorner","useRemoteJsQR","remoteDependencies","timeout","useWebQRScanner","video","isEnabled","captureOptions","interval","onScanned","onError","isRunning","useRef","undefined","decode","clearWorker","scanAsync","current","stop","intervalToUse","setTimeout","clearTimeout","useEffect","kill"],"sourceRoot":"","sources":["../src/useWebQRScanner.ts"],"sourcesContent":["import { useWorker } from '@koale/useworker';\nimport * as React from 'react';\n\nimport { CameraPictureOptions } from './Camera';\nimport { BarCodeScanningResult, MountErrorListener } from './Camera.types';\nimport { captureImageData } from './WebCameraUtils';\n\nconst qrWorkerMethod = ({ data, width, height }: ImageData): any => {\n  // eslint-disable-next-line no-undef\n  const decoded = (self as any).jsQR(data, width, height, {\n    inversionAttempts: 'dontInvert',\n  });\n\n  let parsed;\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (err) {\n    parsed = decoded;\n  }\n\n  if (parsed?.data) {\n    const nativeEvent: BarCodeScanningResult = {\n      type: 'qr',\n      data: parsed.data,\n    };\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [\n        parsed.location.topLeftCorner,\n        parsed.location.bottomLeftCorner,\n        parsed.location.topRightCorner,\n        parsed.location.bottomRightCorner,\n      ];\n    }\n    return nativeEvent;\n  }\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    timeout: 5000,\n  });\n}\n\nexport function useWebQRScanner(\n  video: React.MutableRefObject<HTMLVideoElement | null>,\n  {\n    isEnabled,\n    captureOptions,\n    interval,\n    onScanned,\n    onError,\n  }: {\n    isEnabled: boolean;\n    captureOptions: Pick<CameraPictureOptions, 'scale' | 'isImageMirror'>;\n    interval?: number;\n    onScanned?: (scanningResult: { nativeEvent: BarCodeScanningResult }) => void;\n    onError?: MountErrorListener;\n  }\n) {\n  const isRunning = React.useRef<boolean>(false);\n  const timeout = React.useRef<number | undefined>(undefined);\n\n  const [decode, clearWorker] = useRemoteJsQR();\n\n  async function scanAsync() {\n    // If interval is 0 then only scan once.\n    if (!isRunning.current || !onScanned) {\n      stop();\n      return;\n    }\n    try {\n      const data = captureImageData(video.current, captureOptions);\n\n      if (data) {\n        const nativeEvent: BarCodeScanningResult | any = await decode(data);\n        if (nativeEvent?.data) {\n          onScanned({\n            nativeEvent,\n          });\n        }\n      }\n    } catch (error) {\n      if (onError) {\n        onError({ nativeEvent: error });\n      }\n    } finally {\n      // If interval is 0 then only scan once.\n      if (interval === 0) {\n        stop();\n        return;\n      }\n      const intervalToUse = !interval || interval < 0 ? 16 : interval;\n      // @ts-ignore: Type 'Timeout' is not assignable to type 'number'\n      timeout.current = setTimeout(() => {\n        scanAsync();\n      }, intervalToUse);\n    }\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(() => {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n\n  React.useEffect(() => {\n    return () => {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}