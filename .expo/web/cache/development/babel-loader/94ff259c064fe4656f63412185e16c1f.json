{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ExponentAV from \"./ExponentAV\";\nexport * from \"./Audio/Recording\";\nexport * from \"./Audio/Sound\";\nexport { setIsEnabledAsync } from \"./Audio/AudioAvailability\";\nexport { PitchCorrectionQuality } from \"./AV\";\nexport var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport var INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\nexport var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\nvar _isValueValid = function _isValueValid(value, validValues) {\n  return validValues.filter(function (validValue) {\n    return validValue === value;\n  }).length > 0;\n};\n\nvar _populateMissingKeys = function _populateMissingKeys(userAudioMode, defaultAudioMode) {\n  for (var key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n\n  return userAudioMode;\n};\n\nvar defaultMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false\n};\nvar currentAudioMode = null;\n\nfunction getCurrentAudioMode() {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n\n  return currentAudioMode;\n}\n\nexport function setAudioModeAsync(partialMode) {\n  var mode;\n  return _regeneratorRuntime.async(function setAudioModeAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n          if (_isValueValid(mode.interruptionModeIOS, [INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS, INTERRUPTION_MODE_IOS_DO_NOT_MIX, INTERRUPTION_MODE_IOS_DUCK_OTHERS])) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new Error(\"\\\"interruptionModeIOS\\\" was set to an invalid value.\");\n\n        case 3:\n          if (_isValueValid(mode.interruptionModeAndroid, [INTERRUPTION_MODE_ANDROID_DO_NOT_MIX, INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(\"\\\"interruptionModeAndroid\\\" was set to an invalid value.\");\n\n        case 5:\n          if (!(typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.staysActiveInBackground !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean')) {\n            _context.next = 7;\n            break;\n          }\n\n          throw new Error('\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.');\n\n        case 7:\n          currentAudioMode = mode;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(ExponentAV.setAudioMode(mode));\n\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":";AAAA,OAAOA,UAAP;AAEA;AACA;AACA,SAASC,iBAAT;AACA,SAASC,sBAAT;AAYA,OAAO,IAAMC,qCAAqC,GAAG,CAA9C;AACP,OAAO,IAAMC,gCAAgC,GAAG,CAAzC;AACP,OAAO,IAAMC,iCAAiC,GAAG,CAA1C;AAEP,OAAO,IAAMC,oCAAoC,GAAG,CAA7C;AACP,OAAO,IAAMC,qCAAqC,GAAG,CAA9C;;AAGP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAaC,WAAb,EAA4C;EAChE,OAAOA,WAAW,CAACC,MAAZ,CAAmB,UAACC,UAAD;IAAA,OAAgBA,UAAU,KAAKH,KAA/B;EAAA,CAAnB,EAAyDI,MAAzD,GAAkE,CAAzE;AACD,CAFD;;AAIA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BC,aAD2B,EAE3BC,gBAF2B,EAGd;EACb,KAAK,IAAMC,GAAX,IAAkBD,gBAAlB,EAAoC;IAClC,IAAI,CAACD,aAAa,CAACG,cAAd,CAA6BD,GAA7B,CAAL,EAAwC;MACtCF,aAAa,CAACE,GAAD,CAAb,GAAqBD,gBAAgB,CAACC,GAAD,CAArC;IACD;EACF;;EACD,OAAOF,aAAP;AACD,CAVD;;AAYA,IAAMI,WAAW,GAAc;EAC7BC,kBAAkB,EAAE,KADS;EAE7BC,mBAAmB,EAAElB,qCAFQ;EAG7BmB,oBAAoB,EAAE,KAHO;EAI7BC,uBAAuB,EAAE,KAJI;EAK7BC,uBAAuB,EAAEjB,qCALI;EAM7BkB,iBAAiB,EAAE,IANU;EAO7BC,0BAA0B,EAAE;AAPC,CAA/B;AAUA,IAAIC,gBAAgB,GAAqB,IAAzC;;AAEA,SAASC,mBAAT,GAA4B;EAC1B,IAAI,CAACD,gBAAL,EAAuB;IACrB,OAAOR,WAAP;EACD;;EACD,OAAOQ,gBAAP;AACD;;AAED,OAAO,SAAeE,iBAAf,CAAiCC,WAAjC;EAAA;EAAA;IAAA;MAAA;QAAA;UACCC,IADD,GACQjB,oBAAoB,CAACgB,WAAD,EAAcF,mBAAmB,EAAjC,CAD5B;;UAAA,IAIFpB,aAAa,CAACuB,IAAI,CAACV,mBAAN,EAA2B,CACvClB,qCADuC,EAEvCC,gCAFuC,EAGvCC,iCAHuC,CAA3B,CAJX;YAAA;YAAA;UAAA;;UAAA,MAUG,IAAI2B,KAAJ,wDAVH;;QAAA;UAAA,IAaFxB,aAAa,CAACuB,IAAI,CAACP,uBAAN,EAA+B,CAC3ClB,oCAD2C,EAE3CC,qCAF2C,CAA/B,CAbX;YAAA;YAAA;UAAA;;UAAA,MAkBG,IAAIyB,KAAJ,4DAlBH;;QAAA;UAAA,MAqBH,OAAOD,IAAI,CAACX,kBAAZ,KAAmC,SAAnC,IACA,OAAOW,IAAI,CAACT,oBAAZ,KAAqC,SADrC,IAEA,OAAOS,IAAI,CAACR,uBAAZ,KAAwC,SAFxC,IAGA,OAAOQ,IAAI,CAACN,iBAAZ,KAAkC,SAHlC,IAIA,OAAOM,IAAI,CAACL,0BAAZ,KAA2C,SAzBxC;YAAA;YAAA;UAAA;;UAAA,MA2BG,IAAIM,KAAJ,CACJ,iJADI,CA3BH;;QAAA;UA+BLL,gBAAgB,GAAGI,IAAnB;UA/BK;UAAA,iCAgCQ/B,UAAU,CAACiC,YAAX,CAAwBF,IAAxB,CAhCR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["ExponentAV","setIsEnabledAsync","PitchCorrectionQuality","INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS","INTERRUPTION_MODE_IOS_DO_NOT_MIX","INTERRUPTION_MODE_IOS_DUCK_OTHERS","INTERRUPTION_MODE_ANDROID_DO_NOT_MIX","INTERRUPTION_MODE_ANDROID_DUCK_OTHERS","_isValueValid","value","validValues","filter","validValue","length","_populateMissingKeys","userAudioMode","defaultAudioMode","key","hasOwnProperty","defaultMode","allowsRecordingIOS","interruptionModeIOS","playsInSilentModeIOS","staysActiveInBackground","interruptionModeAndroid","shouldDuckAndroid","playThroughEarpieceAndroid","currentAudioMode","getCurrentAudioMode","setAudioModeAsync","partialMode","mode","Error","setAudioMode"],"sourceRoot":"","sources":["../src/Audio.ts"],"sourcesContent":["import ExponentAV from './ExponentAV';\n\nexport * from './Audio/Recording';\nexport * from './Audio/Sound';\nexport { setIsEnabledAsync } from './Audio/AudioAvailability';\nexport { PitchCorrectionQuality } from './AV';\n\nexport type AudioMode = {\n  allowsRecordingIOS: boolean;\n  interruptionModeIOS: number;\n  playsInSilentModeIOS: boolean;\n  staysActiveInBackground: boolean;\n  interruptionModeAndroid: number;\n  shouldDuckAndroid: boolean;\n  playThroughEarpieceAndroid: boolean;\n};\n\nexport const INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;\nexport const INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;\n\nexport const INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;\nexport const INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;\n\n// Returns true if value is in validValues, and false if not.\nconst _isValueValid = (value: any, validValues: any[]): boolean => {\n  return validValues.filter((validValue) => validValue === value).length > 0;\n};\n\nconst _populateMissingKeys = (\n  userAudioMode: Partial<AudioMode>,\n  defaultAudioMode: AudioMode\n): AudioMode => {\n  for (const key in defaultAudioMode) {\n    if (!userAudioMode.hasOwnProperty(key)) {\n      userAudioMode[key] = defaultAudioMode[key];\n    }\n  }\n  return userAudioMode as AudioMode;\n};\n\nconst defaultMode: AudioMode = {\n  allowsRecordingIOS: false,\n  interruptionModeIOS: INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n  playsInSilentModeIOS: false,\n  staysActiveInBackground: false,\n  interruptionModeAndroid: INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n  shouldDuckAndroid: true,\n  playThroughEarpieceAndroid: false,\n};\n\nlet currentAudioMode: AudioMode | null = null;\n\nfunction getCurrentAudioMode(): AudioMode {\n  if (!currentAudioMode) {\n    return defaultMode;\n  }\n  return currentAudioMode;\n}\n\nexport async function setAudioModeAsync(partialMode: Partial<AudioMode>): Promise<void> {\n  const mode = _populateMissingKeys(partialMode, getCurrentAudioMode());\n\n  if (\n    !_isValueValid(mode.interruptionModeIOS, [\n      INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS,\n      INTERRUPTION_MODE_IOS_DO_NOT_MIX,\n      INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeIOS\" was set to an invalid value.`);\n  }\n  if (\n    !_isValueValid(mode.interruptionModeAndroid, [\n      INTERRUPTION_MODE_ANDROID_DO_NOT_MIX,\n      INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n    ])\n  ) {\n    throw new Error(`\"interruptionModeAndroid\" was set to an invalid value.`);\n  }\n  if (\n    typeof mode.allowsRecordingIOS !== 'boolean' ||\n    typeof mode.playsInSilentModeIOS !== 'boolean' ||\n    typeof mode.staysActiveInBackground !== 'boolean' ||\n    typeof mode.shouldDuckAndroid !== 'boolean' ||\n    typeof mode.playThroughEarpieceAndroid !== 'boolean'\n  ) {\n    throw new Error(\n      '\"allowsRecordingIOS\", \"playsInSilentModeIOS\", \"playThroughEarpieceAndroid\", \"staysActiveInBackground\" and \"shouldDuckAndroid\" must be booleans.'\n    );\n  }\n  currentAudioMode = mode;\n  return await ExponentAV.setAudioMode(mode);\n}\n"]},"metadata":{},"sourceType":"module"}