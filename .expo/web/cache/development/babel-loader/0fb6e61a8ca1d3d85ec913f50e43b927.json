{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport createElement from 'react-native-web/dist/exports/createElement';\nimport ExponentAV from \"./ExponentAV\";\nimport { addFullscreenListener } from \"./FullscreenUtils.web\";\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nvar Video = React.forwardRef(function (props, ref) {\n  return createElement('video', _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref\n  }));\n});\n\nvar ExponentVideo = function (_React$Component) {\n  _inherits(ExponentVideo, _React$Component);\n\n  var _super = _createSuper(ExponentVideo);\n\n  function ExponentVideo() {\n    var _this;\n\n    _classCallCheck(this, ExponentVideo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onFullscreenChange = function (isFullscreen) {\n      if (!_this.props.onFullscreenUpdate) return;\n\n      if (isFullscreen) {\n        _this.props.onFullscreenUpdate({\n          nativeEvent: {\n            fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_PRESENT\n          }\n        });\n      } else {\n        _this.props.onFullscreenUpdate({\n          nativeEvent: {\n            fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_DISMISS\n          }\n        });\n      }\n    };\n\n    _this.onStatusUpdate = function _callee() {\n      var nativeEvent;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.props.onStatusUpdate) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(ExponentAV.getStatusForVideo(_this._video));\n\n            case 4:\n              nativeEvent = _context.sent;\n\n              _this.props.onStatusUpdate({\n                nativeEvent: nativeEvent\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onLoadStart = function () {\n      if (!_this.props.onLoadStart) {\n        return;\n      }\n\n      _this.props.onLoadStart();\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onLoadedData = function (event) {\n      if (!_this.props.onLoad) {\n        return;\n      }\n\n      _this.props.onLoad(event);\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onError = function (event) {\n      if (!_this.props.onError) {\n        return;\n      }\n\n      _this.props.onError(event);\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onProgress = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onSeeking = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onEnded = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onLoadedMetadata = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onCanPlay = function (event) {\n      if (!_this.props.onReadyForDisplay) {\n        return;\n      }\n\n      _this.props.onReadyForDisplay(event);\n\n      _this.onStatusUpdate();\n    };\n\n    _this.onStalled = function () {\n      _this.onStatusUpdate();\n    };\n\n    _this.onRef = function (ref) {\n      _this._removeFullscreenListener == null ? void 0 : _this._removeFullscreenListener();\n\n      if (ref) {\n        _this._video = ref;\n        _this._removeFullscreenListener = addFullscreenListener(_this._video, _this.onFullscreenChange);\n\n        _this.onStatusUpdate();\n      } else {\n        _this._removeFullscreenListener = undefined;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ExponentVideo, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$_removeFullscre;\n\n      (_this$_removeFullscre = this._removeFullscreenListener) == null ? void 0 : _this$_removeFullscre.call(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          source = _this$props.source,\n          _this$props$status = _this$props.status,\n          status = _this$props$status === void 0 ? {} : _this$props$status,\n          objectFit = _this$props.resizeMode,\n          useNativeControls = _this$props.useNativeControls,\n          style = _this$props.style;\n      var customStyle = {\n        position: undefined,\n        objectFit: objectFit,\n        overflow: 'hidden'\n      };\n      return React.createElement(Video, {\n        ref: this.onRef,\n        onLoadStart: this.onLoadStart,\n        onLoadedData: this.onLoadedData,\n        onError: this.onError,\n        onTimeUpdate: this.onProgress,\n        onSeeking: this.onSeeking,\n        onEnded: this.onEnded,\n        onLoadedMetadata: this.onLoadedMetadata,\n        onCanPlay: this.onCanPlay,\n        onStalled: this.onStalled,\n        src: (source == null ? void 0 : source.uri) || undefined,\n        muted: status.isMuted,\n        loop: status.isLooping,\n        autoPlay: status.shouldPlay,\n        controls: useNativeControls,\n        style: [style, customStyle],\n        playsInline: true\n      });\n    }\n  }]);\n\n  return ExponentVideo;\n}(React.Component);\n\nexport { ExponentVideo as default };","map":{"version":3,"mappings":"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","names":["React","createElement","ExponentAV","addFullscreenListener","FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","Video","forwardRef","props","ref","ExponentVideo","onFullscreenChange","isFullscreen","onFullscreenUpdate","nativeEvent","fullscreenUpdate","onStatusUpdate","getStatusForVideo","_video","onLoadStart","onLoadedData","event","onLoad","onError","onProgress","onSeeking","onEnded","onLoadedMetadata","onCanPlay","onReadyForDisplay","onStalled","onRef","_removeFullscreenListener","undefined","source","status","objectFit","resizeMode","useNativeControls","style","customStyle","position","overflow","onTimeUpdate","src","uri","muted","isMuted","loop","isLooping","autoPlay","shouldPlay","controls","playsInline","Component"],"sourceRoot":"","sources":["../src/ExponentVideo.web.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ViewProps } from 'react-native';\nimport createElement from 'react-native-web/dist/exports/createElement';\n\nimport { AVPlaybackNativeSource, AVPlaybackStatus, AVPlaybackStatusToSet } from './AV';\nimport ExponentAV from './ExponentAV';\nimport { addFullscreenListener } from './FullscreenUtils.web';\nimport { VideoFullscreenUpdateEvent, VideoReadyForDisplayEvent } from './Video.types';\n\ntype ExponentVideoProps = {\n  source: AVPlaybackNativeSource | null;\n  resizeMode?: object;\n  status?: AVPlaybackStatusToSet;\n  useNativeControls?: boolean;\n  onStatusUpdate?: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onReadyForDisplay?: (event: { nativeEvent: VideoReadyForDisplayEvent }) => void;\n  onFullscreenUpdate?: (event: { nativeEvent: VideoFullscreenUpdateEvent }) => void;\n  onLoadStart: () => void;\n  onLoad: (event: { nativeEvent: AVPlaybackStatus }) => void;\n  onError: (event: { nativeEvent: { error: string } }) => void;\n  // Required by react-native\n  scaleX?: number;\n  scaleY?: number;\n  translateX?: number;\n  translateY?: number;\n  rotation?: number;\n} & ViewProps;\n\nexport type NaturalSize = {\n  width: number;\n  height: number;\n  orientation: 'portrait' | 'landscape';\n};\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst Video: any = React.forwardRef<HTMLVideoElement, ExponentVideoProps>((props, ref) =>\n  createElement('video', { ...props, ref })\n);\n\nexport default class ExponentVideo extends React.Component<ExponentVideoProps> {\n  _video?: HTMLVideoElement;\n  _removeFullscreenListener?: () => any;\n\n  componentWillUnmount() {\n    this._removeFullscreenListener?.();\n  }\n\n  onFullscreenChange = (isFullscreen: boolean) => {\n    if (!this.props.onFullscreenUpdate) return;\n    if (isFullscreen) {\n      this.props.onFullscreenUpdate({\n        nativeEvent: { fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_PRESENT },\n      });\n    } else {\n      this.props.onFullscreenUpdate({\n        nativeEvent: { fullscreenUpdate: FULLSCREEN_UPDATE_PLAYER_DID_DISMISS },\n      });\n    }\n  };\n\n  onStatusUpdate = async () => {\n    if (!this.props.onStatusUpdate) {\n      return;\n    }\n    const nativeEvent = await ExponentAV.getStatusForVideo(this._video);\n    this.props.onStatusUpdate({ nativeEvent });\n  };\n\n  onLoadStart = () => {\n    if (!this.props.onLoadStart) {\n      return;\n    }\n    this.props.onLoadStart();\n    this.onStatusUpdate();\n  };\n\n  onLoadedData = (event) => {\n    if (!this.props.onLoad) {\n      return;\n    }\n    this.props.onLoad(event);\n    this.onStatusUpdate();\n  };\n\n  onError = (event) => {\n    if (!this.props.onError) {\n      return;\n    }\n    this.props.onError(event);\n    this.onStatusUpdate();\n  };\n\n  onProgress = () => {\n    this.onStatusUpdate();\n  };\n\n  onSeeking = () => {\n    this.onStatusUpdate();\n  };\n\n  onEnded = () => {\n    this.onStatusUpdate();\n  };\n\n  onLoadedMetadata = () => {\n    this.onStatusUpdate();\n  };\n\n  onCanPlay = (event) => {\n    if (!this.props.onReadyForDisplay) {\n      return;\n    }\n    this.props.onReadyForDisplay(event);\n    this.onStatusUpdate();\n  };\n\n  onStalled = () => {\n    this.onStatusUpdate();\n  };\n\n  onRef = (ref: HTMLVideoElement | null) => {\n    this._removeFullscreenListener?.();\n    if (ref) {\n      this._video = ref;\n      this._removeFullscreenListener = addFullscreenListener(this._video, this.onFullscreenChange);\n      this.onStatusUpdate();\n    } else {\n      this._removeFullscreenListener = undefined;\n    }\n  };\n\n  render() {\n    const { source, status = {}, resizeMode: objectFit, useNativeControls, style } = this.props;\n\n    const customStyle = {\n      position: undefined,\n      objectFit,\n      overflow: 'hidden',\n    };\n    return (\n      <Video\n        ref={this.onRef}\n        onLoadStart={this.onLoadStart}\n        onLoadedData={this.onLoadedData}\n        onError={this.onError}\n        onTimeUpdate={this.onProgress}\n        onSeeking={this.onSeeking}\n        onEnded={this.onEnded}\n        onLoadedMetadata={this.onLoadedMetadata}\n        onCanPlay={this.onCanPlay}\n        onStalled={this.onStalled}\n        src={source?.uri || undefined}\n        muted={status.isMuted}\n        loop={status.isLooping}\n        autoPlay={status.shouldPlay}\n        controls={useNativeControls}\n        style={[style, customStyle]}\n        playsInline\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}